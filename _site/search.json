[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Météo Montpellier",
    "section": "",
    "text": "Voici la météo à Montpellier sur les 4 prochains jours. Vous y retrouverez ainsi, la température (max et min de chaque jours), l’humidité (actuelle et moyenne), la vitesse du vent (actuelle et min/max), les précipitation (actuelle et max/moyennes) et l’heure du couché et du levé du soleil.\n\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport requests\nimport json\nimport datetime \nfrom more_itertools import chunked\nfrom IPython.display import display, HTML\n#On affiche le jour de la semaine \nmaintenant = datetime.datetime.now()\n\n# Obtenir le jour de la semaine actuel (en anglais)\njour_semaine = maintenant.strftime('%A')  # Format du jour de la semaine (par exemple : \"lundi\", \"mardi\", etc.)\n\n#On met l'URL de la clef API pour la retrouver avec requests\nurl= 'https://api.open-meteo.com/v1/meteofrance?latitude=43.62&longitude=3.86&hourly=temperature_2m,relative_humidity_2m,precipitation,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=Europe%2FBerlin'\nreponse=requests.get(url)\n\napi_key = 'API météo Montpellier'\n\n# Créez un en-tête avec la clé API\nheaders = {\n    'Authorization': f'Bearer {api_key}'\n}\nparams = {\n    \"latitude\": 52.52,\n    \"longitude\": 13.41,\n    \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"precipitation\", \"wind_speed_10m\"],\n    \"daily\": [\"temperature_2m_max\", \"temperature_2m_min\", \"sunrise\", \"sunset\"],\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nif response.status_code == 200:\n    # Obtenir le jour de la semaine actuel (en anglais)\n jour_semaine = maintenant.strftime('%A')  # Format du jour de la semaine (par exemple : \"lundi\", \"mardi\", etc.)\n\n #On rends les jours de la semaine en français\n def jour():\n    if (jour_semaine=='Monday'):\n     return ('Lundi')\n    elif (jour_semaine=='Tuesday'):\n      return 'Mardi'\n    elif (jour_semaine=='Wednesday'):\n     return 'Mercredi'\n    elif (jour_semaine=='Thursday'):\n     return 'Jeudi'\n    elif (jour_semaine=='Friday'):\n     return 'Vendredi'\n    elif (jour_semaine=='Saturday'):\n     return 'Samedi'\n    else : return 'Dimanche'\n\n #On affecte à chaque jour un chiffre pour pouvoir le retrouver facilement \n correspondance = {\n    'Lundi': 1,\n    'Mardi': 2,\n    'Mercredi': 3,\n    'Jeudi': 4,\n    'Vendredi': 5,\n    'Samedi':6,\n    'Dimanche':7\n }\n j=correspondance.get(jour()) # jour actuelle\n\n def jours():\n   if (j==1):\n      return(['Lundi', 'Mardi', 'Mercredi', 'Jeudi'])\n   elif(j==2):\n      return(['Mardi', 'Mercredi', 'Jeudi', 'Vendredi'])\n   elif(j==3):\n      return(['Mercredi', 'Jeudi', 'Vendredi', 'Samedi'])\n   elif(j==4):\n      return(['Jeudi', 'Vendredi', 'Samedi', 'Dimanche'])\n   elif(j==5):\n      return(['Vendredi', 'Samedi', 'Dimanche', 'Lundi'])\n   elif(j==6):\n      return(['Samedi', 'Dimanche', 'Lundi','Mardi'])\n   else : return('Dimanche', 'Lundi','Mardi', 'Mercredi')\n # Affichez le contenu de la réponse\n data=response.json()\n def date_heure():\n    now=datetime.datetime.now()\n    #On formate la date et l'heure\n    date_format = now.strftime('%Y-%m-%d')  # Format AAAA-MM-JJ\n    heure_format = now.strftime('%H')  # Format HH\n    return f\"{date_format}T{heure_format}:00\" \n time=data[0]['hourly']['time']\n time=list(chunked(time, 24))\n #On classe toutes nos données et on en fait des listes de par jour\n temp=data[0]['hourly']['temperature_2m']\n temp=list(chunked(temp, 24))\n humidity=data[0]['hourly']['relative_humidity_2m']\n humidity=list(chunked(humidity, 24))\n wind=data[0]['hourly']['wind_speed_10m']\n wind=list(chunked(wind, 24))\n precipitation=data[0]['hourly']['precipitation']\n precipitation=list(chunked(precipitation, 24))\n temp_max=data[0]['daily']['temperature_2m_max']\n temp_min=data[0]['daily']['temperature_2m_min']\n sunrise=data[0]['daily']['sunrise']\n sunset=data[0]['daily']['sunset']\n #On regarde a quelle heure de la joournée on se situt \n def heure():\n    for i in range(24):\n       time[0][i]=time[0][i+1]\n       a=time[0][i]==date_heure()\n       if (a==True):\n          return (i)\n Température=[(temp[0][heure()],temp_max[0]),(temp_max[1],temp_min[1]),(temp_max[2],temp_min[2]),(temp_max[3],temp_min[3])]\n Humidité=[(humidity[0][heure()],np.mean(humidity[0])),(np.max(humidity[1]),np.mean(humidity[1])),(np.max(humidity[2]),np.mean(humidity[2])),(np.max(humidity[3]),np.mean(humidity[3]))]\n Vent=[(wind[0][heure()],np.mean(wind[1])),(np.max(wind[1]),np.min(wind[1])),(np.max(wind[2]),np.min(wind[2])),(np.max(wind[3]),np.min(wind[3]))]\n Pluie=[(precipitation[0][heure()],np.mean(precipitation[0])),(np.max(precipitation[1]),np.mean(precipitation[1])),(np.max(precipitation[2]),np.mean(precipitation[2])),(np.max(precipitation[3]),np.mean(precipitation[3]))]\n Soleil=[(sunrise[0],sunset[0]),(sunrise[1],sunset[1]),(sunrise[2],sunset[2]),(sunrise[3],sunset[3])]\n tab=[[f\"actuellement {Température[0][0]}°C, au max {Température[0][1]}°C\",\n f\"au max {Température[1][0]}°C, au min {Température[1][1]}°C\",\n f\"au max {Température[2][0]}°C, au min {Température[2][1]}°C\",\n f\"au max {Température[3][0]}°C, au min {Température[3][1]}°C\"],\n [f\"actuellement {Humidité[0][0]}%, en moyenne {Humidité[0][1]}%\",\n f\"au max {Humidité[1][0]}%, en moyenne {Humidité[1][1]}%\",\n f\"au max {Humidité[2][0]}%, en moyenne {Humidité[2][1]}%\",\n f\"au max {Humidité[3][0]}%, en moyenne {Humidité[3][1]}%\"],\n [f\"actuellement {Vent[0][0]}km/h, en moyenne {Vent[0][1]}km/h\",\n f\"au max {Vent[1][0]}km/h, au min {Vent[1][1]}km/h\",\n f\"au max {Vent[2][0]}km/h, au min {Vent[2][1]}km/h\",\n f\"au max {Vent[3][0]}km/h, au min {Vent[3][1]}km/h\"],\n [f\"actuellement {Pluie[0][0]}mm, en moyenne {Pluie[0][1]}mm\",\n f\"au max {Pluie[1][0]}mm, en moyenne {Pluie[1][1]}mm\",\n f\"au max {Pluie[2][0]}mm, en moyenne {Pluie[2][1]}mm\",\n f\"au max {Pluie[3][0]}mm, en moyenne {Pluie[3][1]}mm\"],\n [Soleil[i] for i in range(4)]]\n Tab=pd.DataFrame(tab,index=['Temperature','Humidite','Vitesse du vent$','Precipitation','Sunrise/Sunset'],\n    columns=[jours()[0],jours()[1],jours()[2], jours()[3]])\n html_Tab = Tab.to_html()\n\n\n\n\n Back to top"
  }
]