---
title: "Météo Montpellier "
format: html
css: style.css
---
Voici la météo à Montpellier sur les 4 prochains jours.
Vous y retrouverez ainsi, la température, l'humidité, la vitesse du vent , les précipitations et l'heure du coucher et du lever du soleil.


```{python, fig.align=center}
#| echo: false
# %%
import datetime 
def date_heure():
 now=datetime.datetime.now()
 #On formate la date et l'heure
 date_format = now.strftime('%d-%m-%Y')  # Format JJ-MM-AAAA
 return f"Nous sommes le {date_format}"
print(f" {date_heure()}")
```

```{python, fig.align=center}
#| echo: false
# %%
import pandas as pd 
import numpy as np
import requests
import json
import datetime 
from more_itertools import chunked
from IPython.display import display, HTML

# Obtenir le jour de la semaine actuel (en anglais)
maintenant = datetime.datetime.now()
jour_semaine = maintenant.strftime('%A')

# Fonction pour convertir le jour en français
def jour_en_francais(jour_semaine):
    jours = {
        'Monday': 'Lundi',
        'Tuesday': 'Mardi',
        'Wednesday': 'Mercredi',
        'Thursday': 'Jeudi',
        'Friday': 'Vendredi',
        'Saturday': 'Samedi',
        'Sunday': 'Dimanche'
    }
    return jours.get(jour_semaine, 'Unknown')

# Fonction pour obtenir les 4 prochains jours en français
def prochains_jours(jour_actuel):
    jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
    index = jours.index(jour_actuel)
    return [jours[(index + i) % 7] for i in range(4)]

# Conversion du jour actuel en français
jour_actuel = jour_en_francais(jour_semaine)
jours_affichage = prochains_jours(jour_actuel)

# URL de l'API météo (corrigée)
url = 'https://api.open-meteo.com/v1/meteofrance'
params = {
    "latitude": 43.62,
    "longitude": 3.86,
    "hourly": "temperature_2m,relative_humidity_2m,precipitation,wind_speed_10m",
    "daily": "temperature_2m_max,temperature_2m_min,sunrise,sunset",
    "timezone": "Europe/Berlin"
}

# Requête à l'API météo
response = requests.get(url, params=params)
if response.status_code == 200:
    data = response.json()

    # Extraction des données horaires et quotidiennes
    hourly = data['hourly']
    daily = data['daily']

    # Chunking des données horaires en blocs de 24 heures
    time = list(chunked(hourly['time'], 24))
    temp = list(chunked(hourly['temperature_2m'], 24))
    humidity = list(chunked(hourly['relative_humidity_2m'], 24))
    wind = list(chunked(hourly['wind_speed_10m'], 24))
    precipitation = list(chunked(hourly['precipitation'], 24))

    temp_max = daily['temperature_2m_max']
    temp_min = daily['temperature_2m_min']
    sunrise = daily['sunrise']
    sunset = daily['sunset']

    # Détermination de l'heure actuelle dans la journée
    def heure_actuelle():
        now = datetime.datetime.now()
        heure_format = now.strftime('%Y-%m-%dT%H:00')
        return next((i for i, t in enumerate(time[0]) if t == heure_format), 0)

    heure = heure_actuelle()

    # Construction du tableau des données
    tableau = {
        'Jour': jours_affichage,
        'Date': [maintenant.strftime('%d/%m/%Y'), 
                 (maintenant + datetime.timedelta(days=1)).strftime('%d/%m/%Y'),
                 (maintenant + datetime.timedelta(days=2)).strftime('%d/%m/%Y'),
                 (maintenant + datetime.timedelta(days=3)).strftime('%d/%m/%Y')],
        'Température Max': [f"{t}°C" for t in temp_max],
        'Température Min': [f"{t}°C" for t in temp_min],
        'Vent Max': [f"{max(w)} km/h" for w in wind],
        'Précipitations Max': [f"{max(p)} mm" for p in precipitation],
        'Lever du Soleil': sunrise,
        'Coucher du Soleil': sunset
    }

    df = pd.DataFrame(tableau)
    display(HTML(df.to_html()))
else:
    print("Erreur lors de la requête API")
```


